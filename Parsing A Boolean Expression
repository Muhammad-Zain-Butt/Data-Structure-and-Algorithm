//1106. Parsing A Boolean Expression
/* A boolean expression is an expression that evaluates to either true or false. It can be in one of the following shapes:
't' that evaluates to true.
'f' that evaluates to false.
'!(subExpr)' that evaluates to the logical NOT of the inner expression subExpr.
'&(subExpr1, subExpr2, ..., subExprn)' that evaluates to the logical AND of the inner expressions subExpr1, subExpr2, ..., subExprn where n >= 1.
'|(subExpr1, subExpr2, ..., subExprn)' that evaluates to the logical OR of the inner expressions subExpr1, subExpr2, ..., subExprn where n >= 1.
Given a string expression that represents a boolean expression, return the evaluation of that expression.
It is guaranteed that the given expression is valid and follows the given rules.
Example 1:
Input: expression = "&(|(f))"
Output: false
Explanation: 
First, evaluate |(f) --> f. The expression is now "&(f)".
Then, evaluate &(f) --> f. The expression is now "f".
Finally, return false.
Example 2:
Input: expression = "|(f,f,f,t)"
Output: true
Explanation: The evaluation of (false OR false OR false OR true) is true.
Example 3:
Input: expression = "!(&(f,t))"
Output: true
Explanation: 
First, evaluate &(f,t) --> (false AND true) --> false --> f. The expression is now "!(f)".
Then, evaluate !(f) --> NOT false --> true. We return true.
Constraints:
1 <= expression.length <= 2 * 104
expression[i] is one following characters: '(', ')', '&', '|', '!', 't', 'f', and ','. */


class Solution {
public:
    char solve(vector<char> &values, char op){//func
        if(op == '!'){
            return (values[0] == 't' ? 'f' : 't');      
        }
        if(op == '&'){
            for(char &val : values){
                if(val == 'f'){
                    return 'f';
                }
            }
            return 't';
        }
        if(op == '|'){
            for(char &val : values){
                if(val == 't'){
                    return 't';
                }
            }
            return 'f';
        }
        return 't';//never come here
    }
    bool parseBoolExpr(string expression) {//main func
        int n = expression.length();
        stack<char> st;
        for(int i=0; i<n; i++){
            if(expression[i] == ',') continue;
            if(expression[i] == ')'){
                vector<char> values;
                while(st.top() != '('){
                    values.push_back(st.top());
                    st.pop();
                }
                st.pop();
                char op = st.top();
                st.pop();
                st.push(solve(values, op));
            }
            else{
                st.push(expression[i]);
            }
        }
        return st.top() == 't' ? true : false;
    }
};
static const auto init = []() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    return 0;
}();
