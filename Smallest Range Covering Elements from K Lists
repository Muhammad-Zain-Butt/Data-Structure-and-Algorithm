//632. Smallest Range Covering Elements from K Lists
/* You have k lists of sorted integers in non-decreasing order. Find the smallest range that includes at least one number from each of the k lists.
We define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.
Example 1:
Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]
Output: [20,24]
Explanation: 
List 1: [4, 10, 15, 24,26], 24 is in range [20,24].
List 2: [0, 9, 12, 20], 20 is in range [20,24].
List 3: [5, 18, 22, 30], 22 is in range [20,24].
Example 2:
Input: nums = [[1,2,3],[1,2,3],[1,2,3]]
Output: [1,1]
Constraints:
nums.length == k
1 <= k <= 3500
1 <= nums[i].length <= 50
-105 <= nums[i][j] <= 105
nums[i] is sorted in non-decreasing order. */

class Solution {
public:
    vector<int> smallestRange(vector<vector<int>>& nums) {
        int k = nums.size();
        //element, listidx, idx
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;
        int maxEle = INT_MIN;
        for(int i=0; i<k; i++){
            pq.push({nums[i][0], i, 0});
            maxEle = max(maxEle, nums[i][0]);
        }
        vector<int> resultRange = {-1000000, 1000000};
        while(!pq.empty()){
            vector<int> curr = pq.top();
            pq.pop();
            int minEle = curr[0];
            int listIdx = curr[1];
            int idx = curr[2];
            if(maxEle - minEle < resultRange[1] - resultRange[0]){
                resultRange[0] = minEle;
                resultRange[1] = maxEle;
            }
            if(idx+1 < nums[listIdx].size()){
                int nextEle = nums[listIdx][idx+1];
                pq.push({nextEle, listIdx, idx+1});
                maxEle = max(maxEle, nextEle);
            }
            else{
                break;
            }
        }
        return resultRange;
    }
};
static const auto init = []() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    return 0;
}();
