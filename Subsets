//78. Subsets
/* Given an integer array nums of unique elements, return all possible subsets (the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.
Example 1:
Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:
Input: nums = [0]
Output: [[],[0]]
Constraints:
1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique. */

class Solution {
public:
    vector<vector<int>> result;
    void solve(int i, vector<int>& nums, vector<int>& temp){//recursive funct
        if(i >= nums.size()){
            result.push_back(temp);
            return;
        }
        temp.push_back(nums[i]);//teke ith element
        solve(i+1, nums, temp);
        temp.pop_back(); //not take ith element
        solve(i+1, nums, temp);
    }
    vector<vector<int>> subsets(vector<int>& nums) { //main func
        vector<int> temp;
        solve(0, nums, temp);
        return result;
    }
};
static const auto init = []() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    return 0;
}();
